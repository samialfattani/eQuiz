
def extension

class Shortcut{
    def destType = 'desktop' //desktop:D, startMenu:P, startup:S
    def srcName = ''
    def destFolder = ''
    def desc = ''
    def shortcutName = ''
    def shortcutIcon = ''
}

class RarTask extends DefaultTask 
{
    def version = '-----'
    def release = '-----'
    File sfxConfigFile = null
    File outputDir = null

    def shortcut = new Shortcut()

    def extractLocation = ''
    def extractDir = ''

    @TaskAction def doThis() 
    {
        def sfxConfigFile = project.file("$outputDir/SFX-package.conf")

        def destTypeMap = ['desktop':'D', 'startMenu':'P', 'startup':'S']
        shortcut.destType = destTypeMap[shortcut.destType]

        def extractLocationMap = ['program files':'', 'current':'.\\']
        extractLocation = extractLocationMap[ extractLocation ]
        
        sfxConfigFile.write generateSFXConfig();
    }

    def generateSFXConfig()
    {
        //using Dollar Slashy String $/.../$ read[http://docs.groovy-lang.org/latest/html/documentation/#_dollar_slashy_string]
        def htmlText = $/
;-------------------------------
; This file is generated as a config file to generate SFX rar
; ${version}
;

; run after install
;Setup=eQuiz-client.exe -h 10.4.10.100 -p 10000

; initial Installation folder
; Path=.\eQuiz  --> sets initial to Current.
; Path=eQuiz    --> sets initial to "Program Files" dir.
Path=${extractLocation}${extractDir}

;save the initial folder for later installation
;SavePath

; Careate shortcut on Desktop
; Shortcut=<DestType>,<SrcName>,<DestFolder>,<Description>,<ShortcutName>,<ShortcutIcon> 
Shortcut=${shortcut.destType}, ${shortcut.srcName}, ${shortcut.destFolder}, ${shortcut.desc}, ${shortcut.shortcutName}, ${shortcut.shortcutIcon}

; Extract the files to a temporary directory
;TempMode

; Use semi-silent mode
; 0-show setup , 
; 1-completely sielent (nothing shown),
; 2-show setup and run sielently
Silent=0

; Overwrite any existing files
Overwrite=1

; The title of the SFX archive
Title=eQuiz, Cient, manga ${version}

; The text to show initially when the user clicks on the SFX archive (will only matter if using Silent=0)
Text
{
<pre style="color: blue; font-weight: bold ">
Product     : manga ${version} 
Released on : ${release} 
Description : Fix Reading Recorded Data

What's A New:</pre>

<pre>Server Side:
- Fix coding bugs in Exam Loader's classes, now it can be extended to any other file types.
- Fix the reading of Timing data from file, now it can detect the total spend time and 
    appended to the student so that he can connect again after finish.
- add feature of disconnected status.
- add feature of Ungrade student and Unfinish him.
- GUI: change IP and port to be in one label

Client Side:
- GUI: change the style of quesion list navigator.

Gradle Side:- 
- 

Problem NOT SOLVED YET:
- we need to move the validation method to be inside Student class
- why the heap memory is keep increasing on each backup?
- let the multiple choices boxes to be hidden without taking palce.
- change exam time 
- ODS file loader still not implemented 100%   
</pre>
}    
        /$;
        return htmlText;
    }


}//end class AboutTask


task makeSFXConfig(type: RarTask) 
task makeSFX(dependsOn: 'makeSFXConfig')  



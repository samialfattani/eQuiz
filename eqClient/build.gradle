/*----------------
--     CLIENT   --
------------------*/
	import org.gradle.plugins.ide.eclipse.model.AccessRule

	/*only buildscript {} and other plugins {} blocks are allowed before plugins {} blocks, 
	  no other statements are allowed
	//this is for making exe file only*/	
	plugins {
		id 'edu.sc.seis.launch4j' version '2.4.6' //https://github.com/TheBoegl/gradle-launch4j
		id 'java'
		id 'application' //to use 'gradle run'
		id 'eclipse' // optional (to generate Eclipse project files)
	}
	
	
	//--- IMPORTANT CHANGES ----
		buildDir = 'D:/build/equiz-client'

		mainClassName = 'frawla.equiz.client.Launcher'
		def splashImage = 'splash.jpg'
		def verdetls = versionDetails()
		def gitLastTag = verdetls.lastTag
	//------------------------
	
	applicationDefaultJvmArgs = ["-splash:$splashImage"]
		
	dependencies
	{
		//compile project (":eqCore")
		implementation project (":eqCore")
		//Junit
		testImplementation 'org.junit.jupiter:junit-jupiter:5.5.0'
		
		//JSAP (Java Simple Arguments Parser)
		implementation 'com.martiansoftware:jsap:2.1' //{ because 'we want to run the application using parameters' }
	}
	
	
	eclipse 
	{
		classpath {	
		    //customizing the classes output directory:
		    //defaultOutputDir = file('build') //must be inside project folder
		
		    //default settings for downloading sources and Javadoc:
		    downloadSources = false
		    downloadJavadoc = true

				file { whenMerged {
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javafx/**'))
                jre.accessRules.add(new AccessRule('0', 'com/sun/javafx/**'))
        } }

  	}
	}

	jar {
		archiveVersion = '' //to avoid write it in Jar file name
		manifest {
			attributes(
			'Class-Path': ".",
			'Implementation-Title': "eQuiz Manifest",
			'Implementation-Version': gitLastTag /*gitVersion()*/, 
			'Main-Class': mainClassName)
		}
	}
	
	// launch4j: put all configuration of launch4j here 
	createExe {
		dependsOn 'makeAboutImage'
		//outputDir = ""
		fileDescription	 = "Electronic Quizes - Client"
		copyright = "All Copyright are recieved (c) 2016~2018 by Eng. Sami Alfattani"
		companyName = "Eng. Sami Alfattani"
		 
	  mainClassName = this.mainClassName
	    
	  icon = "exam.ico" 	//realative to exe
	    
	  //headerType = "console" //no splash with console
	  headerType = "gui" 
		jvmOptions = ["-splash:$splashImage"]
		//splashFileName = splashImage
		
		version = gitLastTag /*gitVersion()*/
		outfile = 'eQuiz-client.exe'
		productName	= 'eQuiz-client'
		internalName = 'eQuiz-client-' + version
		
		//jreMinVersion = '9.0'
		jdkPreference = 'preferJre' //jreOnly|preferJre|preferJdk|jdkOnly

		// initialHeapSize = 0 //Optional
		// maxHeapSize = 4096
		// maxHeapPercent = 50
		errTitle = "Java is not Supported on this Computer"
		downloadUrl = 'https://www.java.com/ES/download/'
		messagesStartupError "An error occurred while starting the application.\n" + "حصلت مشكلة أثناء التشغيل" 
		messagesBundledJreError "This application was configured to use a bundled Java Runtime Environment but the runtime is missing or corrupted.\n" + "من المفترض أن يعمل هذا البرنامج على نسخة خاصة من الجافا متضمنة معه،ويبدو أنه قد حصل خطأ في هذه النسخة"
		messagesJreVersionError "This application requires a Java Runtime Environment\n" + "هذا البرنامج يحتاج إلى الجافا"
		messagesLauncherError "The registry refers to a nonexistent Java Runtime Environment installation or the runtime is corrupted.\n" + "يشير الريجستري إلى عدم تحميل الجافا أو النسخة معطوبة"
		messagesInstanceAlreadyExists "An application instance is already running.\n" + "هذا البرنامج حاليا قيد التشغيل ولا يمكن فتح أكثر من نسخة واحدة"
		//see more: https://github.com/TheBoegl/gradle-launch4j
		
	}
	
	createExe.doFirst 
	{
		def destinations = ["$buildDir/$outputDir", "$buildDir/SFX"]
		destinations.each {  dest ->		
			copy{
				from "src/main/resources/images"
				include "exam.ico"
				include splashImage
				into dest
			}
		}
	}

	apply from: file('../eqCore/about.gradle')
	makeAboutImage {
		def res = 'src/main/resources/images'
		inputFile = file("$res/splash-blank.jpg")
		outputFile = file("$res/$splashImage")

		version = gitLastTag /*gitVersion()*/
		release = new Date().format('MMMM d, yyyy') 
		licensed = 'To Eng. Sami Alfattani'

		//println "about-"*5
	}
	
	apply from: file('../eqCore/winrar/build.gradle');


	def get_git_message()
	{
		def stdout = new ByteArrayOutputStream()
		//git log -n 1 --format=format:%B
		exec {
			commandLine 'git', 'log', '-n', '1', '--format=format:%B'
			standardOutput = stdout
		}
		return stdout.toString().trim()
	}

	def first_line( x )
	{
			return x.substring(0 , x.indexOf('\n')+1 )	
	}

	makeSFXConfig
	{
		outputDir = file("$buildDir/launch4j")

		version = gitLastTag
		release = new Date().format('MMMM d, yyyy') 
		git_message = get_git_message()
		
		git_message_title = first_line(git_message)
		git_message = git_message.split('\n').drop(1).join('\n')

		shortcut.destType = 'desktop'
		shortcut.srcName = 'eQuiz-client.exe -h 10.4.10.100 -p 10000' 	//relative to archive
		shortcut.destFolder = ''
		shortcut.desc = 'dddddd'
		shortcut.shortcutName = 'run-eQuiz'
		shortcut.shortcutIcon = 'exam.ico' 								//relative to archive

		extractLocation = 'current' //'current' or 'program files'
		extractDir = 'eQuiz'
	}

	makeSFX
	{
		
		def outputDir =  file("$buildDir/launch4j")
		outputDir.mkdirs() //create if not exists

		def outputFile = file("$outputDir/eQuiz-Installer.exe")
		def packageIcon = file("$outputDir/exam.ico")
		def packageImage = file("$outputDir/splash.jpg")
		def packgeList =  ["lib",
		 'eQuiz-Client.exe', 
		 'exam.ico', 'splash.jpg']

 		def commandLine = ['cmd', '/c', 
 			'rar', 'a', '-m5',
 			"-sfx \"${outputFile.absolutePath}\"" , 			
			'-ep1',	
			"-iicon\"${packageIcon.absolutePath}\"" ,		
			"-iimage\"${packageImage.absolutePath}\"" ,
			"-z\"${outputDir}\\SFX-package.conf\"" 
			] + packgeList
		
		file("$outputDir/sfx-make.bat").write commandLine.join(' ^\n ') + "\npause";
		//println commandLine + '--------------'
		//standardOutput = System.out //new ByteArrayOutputStream()
	} 

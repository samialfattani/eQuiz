/*----------------
--     SERVER   --
------------------*/

	/*only buildscript {} and other plugins {} blocks are allowed before plugins {} blocks, 
	  no other statements are allowed
	//this is for making exe file only*/	
	plugins {
		id 'edu.sc.seis.launch4j' version '2.3.0'
		id 'java'
		id 'eclipse'
		id 'groovy'
		
		id 'org.beryx.runtime' version '1.2.1'
	}
	
	buildDir = 'D:/build/equiz-server'

	mainClassName = 'frawla.equiz.client.Launcher'
	def splashImage = 'splash.jpg'
	def verdetls = versionDetails()
	def gitLastTag = verdetls.lastTag

	test {
	    useJUnitPlatform()
	}
	
	dependencies
	{
		implementation project (":eqCore")
	
		//Junit
		testImplementation 'org.junit.jupiter:junit-jupiter:5.5.0'
		testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.3.1'
		
		//mokito
		testImplementation "org.mockito:mockito-core:2.28.+"
		
		//Excel (.xlsx)
		implementation 'org.apache.poi:poi:4.1.0'
		implementation 'org.apache.poi:poi-ooxml:4.1.0'
		
		//Open-Office Sheet files (.ods)
		implementation 'org.apache.odftoolkit:simple-odf:0.7-incubating'
		
		//iText
		implementation 'com.itextpdf:itextpdf:5.5.10'
		implementation 'com.itextpdf:itext-pdfa:5.5.10'
		//compile 'com.itextpdf:itext-xtra:5.5.10'
		//compile 'com.itextpdf.tool:xmlworker:5.5.10'
		
		//FOP
		implementation 'commons-io:commons-io:2.5'
		
		
		// https://mvnrepository.com/artifact/org.json/json
		implementation 'org.json:json:20180813'
		
	}
	
	
	eclipse {
		
		classpath {
		    //customizing the classes output directory:
		    //defaultOutputDir = file('build') //must be inside project folder
		
		    //default settings for downloading sources and Javadoc:
		    downloadSources = false
		    downloadJavadoc = true
		}
	}

	apply plugin: 'application' //adds 'run' task	
	mainClassName = 'frawla.equiz.server.gui.Launcher'

	//this is to run with JVM option to run the java agent
	run {
	     jvmArgs '-javaagent:../ObjectSize/build/libs/ObjectSizeFetcherAgent.jar'
	}

	runtime 	
	{
	    //jlink options
	    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
	}


	jar {
		archiveVersion = '' //to avoid write it in Jar file name
    	manifest {
    	 attributes(
			'Class-Path': ".",
    	 	'Implementation-Title': "Gradle",
            'Implementation-Version': gitLastTag /*gitVersion()*/,
            'Main-Class': mainClassName)
    	}
	}

	// launch4j: put all configuration of launch4j here 
	createExe {
		//outputDir = "../../exe/server"
		fileDescription =	"Electronic Quizes - Server"
		copyright = "All Copyright are recieved (c) 2016~2018 by Eng. Sami Alfattani"
		companyName = "Eng. Sami Alfattani"
		 
	    mainClassName = this.mainClassName
	    
	    icon = "servericon.ico" //realative to exe
		
		//initialHeapSize = 0 //Optional
		maxHeapSize = 4096
		maxHeapPercent = 50
		headerType = "console" //no splash with console
		//splashFileName = new File('src/main/resources/images/splash-server.bmp').absolutePath
		//project.name
		jvmOptions = ["-splash:$splashImage"]
		
		version =  gitLastTag /*gitVersion()*/
		outfile	= 'eQuiz-server.exe'	
		productName	= 'eQuiz-server'
		internalName = 'eQuiz-server-' + version

		errTitle = "Java is not Supported on this Computer"
		downloadUrl = 'https://www.java.com/ES/download/'
		messagesStartupError "An error occurred while starting the application.\n" + "حصلت مشكلة أثناء التشغيل" 
		messagesBundledJreError "This application was configured to use a bundled Java Runtime Environment but the runtime is missing or corrupted.\n" + "من المفترض أن يعمل هذا البرنامج على نسخة خاصة من الجافا متضمنة معه،ويبدو أنه قد حصل خطأ في هذه النسخة"
		messagesJreVersionError "This application requires a Java Runtime Environment\n" + "هذا البرنامج يحتاج إلى الجافا"
		messagesLauncherError "The registry refers to a nonexistent Java Runtime Environment installation or the runtime is corrupted.\n" + "يشير الريجستري إلى عدم تحميل الجافا أو النسخة معطوبة"
		messagesInstanceAlreadyExists "An application instance is already running.\n" + "هذا البرنامج حاليا قيد التشغيل ولا يمكن فتح أكثر من نسخة واحدة"
		//see more: https://github.com/TheBoegl/gradle-launch4j
	}
	
	createExe.doFirst 
	{
		copy{
			from "src/main/resources/images"
			include "servericon.ico"
			include splashImage
			into "$buildDir/$outputDir"
		}
	}
	
	
	apply from: file('../eqCore/about.gradle')
	makeAboutImage {
		def res = 'src/main/resources/images'
		inputFile = file("$res/splash-blank.jpg")
		outputFile = file("$res/$splashImage")
		version = gitLastTag
		//version = gitVersion()
		release = new Date().format('MMMM d, yyyy') 
		licensed = 'To Eng. Sami Alfattani'

		//println "about-"*5
	}
	

	
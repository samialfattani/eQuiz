
	/*only buildscript {} and other plugins {} blocks are allowed before plugins {} blocks, 
	  no other statements are allowed*/
	//this is for making exe file only
	plugins {
		id 'edu.sc.seis.launch4j' version '2.3.0'
	}
	
	
	apply plugin: 'java'
	apply plugin: 'eclipse'
	repositories{
		mavenLocal();
		mavenCentral();		
	}

	configurations.all {
	    resolutionStrategy {
	        force 'xml-apis:xml-apis:1.0.b2'
	    }
	}

	dependencies
	{
		testCompile 'junit:junit:4.+'
		
		//Excel
		compile files ( System.getenv()['COMMON_JAVA_LIB'] + '/excel/poi-3.14-20160307.jar')		
		compile files ( System.getenv()['COMMON_JAVA_LIB'] + '/excel/poi-ooxml-3.14-20160307.jar')
		compile files ( System.getenv()['COMMON_JAVA_LIB'] + '/excel/poi-ooxml-schemas-3.14-20160307.jar')
		compile files ( System.getenv()['COMMON_JAVA_LIB'] + '/excel/poi-scratchpad-3.14-20160307.jar')
		compile files ( System.getenv()['COMMON_JAVA_LIB'] + '/excel/xmlbeans-2.6.0.jar')

		//iText
		//compile	'org.apache.commons:commons-imaging:1.0-SNAPSHOT'
		compile 'com.itextpdf:itextpdf:5.5.10'
		compile 'com.itextpdf:itext-pdfa:5.5.10'
		//compile 'com.itextpdf:itext-xtra:5.5.10'
		//compile 'com.itextpdf.tool:xmlworker:5.5.10'		

		//Cloning
		compile 'uk.com.robust-it:cloning:1.9.2'

		//FOP
		compile 'commons-io:commons-io:2.5'
		compile 'org.apache.xmlgraphics:fop:2.1'
		
		//JAXB
		compile 'javax.xml.bind:jaxb-api:2.2.+'
		
		//JSAP (Java Simple Arguments Parser)
		compile 'com.martiansoftware:jsap:2.1'
		
		//Honcho for self-Update
		//compile files ( System.getenv()['COMMON_JAVA_LIB'] + '/honcho-api.jar')
		

	}
	
	eclipse {
		classpath {	
		    //customizing the classes output directory:
		    defaultOutputDir = file('build-eclipse')
		
		    //default settings for downloading sources and Javadoc:
		    downloadSources = false
		    downloadJavadoc = true

			file
			{
	            whenMerged { cp ->
	                // Add sources to a classpath entry
	                def fileReferenceFactory = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory()
	
					def entry 
					entry = cp.entries.find{ e -> e.path.endsWith('poi-3.14-20160307.jar') }
					entry.javadocPath = fileReferenceFactory.fromPath('http://poi.apache.org/apidocs')
	                entry = cp.entries.find{ e -> e.path.endsWith('poi-ooxml-3.14-20160307.jar') }
					entry.javadocPath = fileReferenceFactory.fromPath('http://poi.apache.org/apidocs')
	                entry = cp.entries.find{ e -> e.path.endsWith('poi-ooxml-schemas-3.14-20160307.jar') }
					entry.javadocPath = fileReferenceFactory.fromPath('http://poi.apache.org/apidocs')
	                entry = cp.entries.find{ e -> e.path.endsWith('poi-scratchpad-3.14-20160307.jar') }
					entry.javadocPath = fileReferenceFactory.fromPath('http://poi.apache.org/apidocs')
	                entry = cp.entries.find{ e -> e.path.endsWith('xmlbeans-2.6.0.jar') }
					entry.javadocPath = fileReferenceFactory.fromPath('http://poi.apache.org/apidocs')
	                
	                //entry.javadocPath = fileReferenceFactory.fromPath('http://poi.apache.org/apidocs/')	                
	                //entry.javadocPath = fileReferenceFactory.fromPath( System.getenv()['COMMON_JAVA_LIB'] + '/excel/apidocs.zip' )
            	}
            }
		}
	}
	

	apply plugin: 'application' //adds 'run' task	
	mainClassName = 'frawla.equiz.server.Main'

	apply plugin: 'distribution' //adds 'distZip' task	
	version = '2.3.1.50' 
	distributions {
    	custom {}
	}

	jar {
    	manifest {
    	 attributes(
			'Class-Path': ".",
    	 	'Implementation-Title': "Gradle",
            'Implementation-Version': version,
            'Main-Class': mainClassName)
    	}
	}


		//apply plugin: 'launch4j'
	createExe {
		outputDir = "exe"
		fileDescription	"Electronic Quizes"
		copyright = "All Copyright are recieved (c) 2016, This is a program for e-quizes in order to make exams for students and mark registeration."
		companyName = "Sami"
		println '---------' + mainClassName
		 
		if(mainClass == "frawla.equiz.server.Main")
		{ 
		    println mainClassName 
		    mainClassName = "frawla.equiz.server.Main"
		    icon = new File('src/main/resources/images/servericon_256px.ico').absolutePath
			maxHeapSize = 4096
			maxHeapPercent = 50
			headerType = "console" //no splash with console
			//splashFileName = new File('src/main/resources/images/splash-server.bmp').absolutePath
			outfile	= project.name + '-server.exe'	
			productName	= project.name + '-server'
			internalName = project.name + '-server'
		}else{
		    mainClassName = "frawla.equiz.client.Main"
		    icon = new File('src/main/resources/images/exam.ico').absolutePath
		    headerType = "console" //no splash with console
			//splashFileName = new File('src/main/resources/images/splash-client.bmp').absolutePath
			outfile = project.name + '-client.exe'
			productName	= project.name + '-client'
			internalName = project.name + '-client'
		}
		messagesStartupError "An error occurred while starting the application.\n" + "ÕœÀ Œÿ√ √À‰«¡  ‘€Ì· «·»—‰«„Ã" 
		messagesBundledJreError "This application was configured to use a bundled Java Runtime Environment but the runtime is missing or corrupted.\n" + "Â–« «·»—‰«„Ã „’„„ ·ﬂÌ Ì⁄„·  Õ  »Ì∆… Ã«›« «· ‘€Ì·Ì…° Ì»œÊ √‰ «·Ã«›« €Ì— „ÊÃÊœ… «Ê „⁄ÿ·…"
		messagesJreVersionError "This application requires a Java Runtime Environment\n" + "Œÿ√ ›Ì «’œ«— ‰”Œ… «·Ã«›« °  √ﬂœ „‰  À»Ì  «·‰”Œ… «·„ÿ·Ê»…"
		messagesLauncherError "The registry refers to a nonexistent Java Runtime Environment installation or the runtime is corrupted.\n" + "«·Ã«›« €Ì— „”Ã·… »‘ﬂ· ’ÕÌÕ"
		messagesInstanceAlreadyExists "An application instance is already running.\n" + "·«Ì„ﬂ‰ › Õ √ﬂÀ— „‰ ‰”Œ… ··»—‰«„Ã"
		//see more: https://github.com/TheBoegl/gradle-launch4j
	}
	
	//just for test. you can remove this task
	task simo() {
		String p = "$buildDir/libs/$project.name-$version".replace("/", File.separator).replace("\\", File.separator)				
	    println p + ".jar"
	    println "source compatibility " + sourceCompatibility
		println "project compatibility " + project.targetCompatibility
		println System.getenv()['COMMON_JAVA_LIB']
		println mainClassName
	}
	
	